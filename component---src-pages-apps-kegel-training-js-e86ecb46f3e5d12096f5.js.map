{"version":3,"sources":["webpack:///./src/components/pages/kegel-training/styles/index.js","webpack:///./src/components/pages/kegel-training/index.js","webpack:///./src/pages/apps/kegel-training.js","webpack:///./src/utils/common.js"],"names":["GlobalStyle","createGlobalStyle","Container","styled","div","Number","props","theme","spacing","Counter","Overlay","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","KegelTraining","useState","num","setNum","counterNum","setCounterNum","counting","setCounting","counterDelay","setCounterDelay","counterTimeout","useCallback","value","newNum","n","useInterval","useEffect","handleKeyDown","event","keyCode","document","addEventListener","removeEventListener","CssBaseline","pageQuery","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval"],"mappings":"+ZAMO,IAAMA,EAAcC,YAAH,KAUXC,EAA+BC,IAAOC,IAAV,oEAAGD,CAAH,oFAQ5BE,EAA4BF,IAAOC,IAAV,iEAAGD,CAAH,4FAIJ,SAAAG,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,QAKlDC,EAA6BN,YAAOE,GAAV,kEAAGF,CAAH,gBAI1BO,EAA6BP,IAAOC,IAAV,kEAAGD,CAAH,+C,YC1BjCI,EAAQI,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,QAEhBC,UAAW,CACTJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WA2DLE,EAtDO,WAAO,IAAD,EACJC,mBAAiB,KAAhCC,EADmB,KACdC,EADc,OAGUF,mBAAiB,GAA9CG,EAHmB,KAGPC,EAHO,OAKMJ,oBAAkB,GAA3CK,EALmB,KAKTC,EALS,OAOcN,mBAAkB,MAAnDO,EAPmB,KAOLC,EAPK,KASpBC,EAAiBC,uBAAY,WACjCN,GAAc,SAAAO,GACZ,IAAMC,EAAiBD,EAAQ,EAQ/B,OANe,IAAXC,IACFN,GAAY,GACZJ,GAAO,SAAAW,GAAC,OAAIA,EAAI,KAChBL,EAAgB,OAGXI,OAER,IAmBH,OAjBAE,YAAYL,EAAgBF,GAE5BQ,qBAAU,WACR,IAAMC,EAAgB,SAACC,GACC,KAAlBA,EAAMC,UAAmBb,GAAYJ,EAAM,IAC7CK,GAAY,GACZF,EAAc,GACdI,EAAgB,OAKpB,OADAW,SAASC,iBAAiB,UAAWJ,GAC9B,WACLG,SAASE,oBAAoB,UAAWL,MAEzC,CAACX,EAAUJ,IAGZ,oCACE,kBAACqB,EAAA,EAAD,MACA,kBAAC1C,EAAD,MACA,kBAAC,IAAD,CAAeO,MAAOA,GACpB,kBAACL,EAAD,KACGuB,EAAW,kBAAChB,EAAD,KAAUc,GAAwB,kBAAC,EAAD,KAASF,GACvD,kBAACX,EAAD,UCpEGiC,GAFExB,YAEO,e,wGCATe,EAAc,SAACU,EAAeC,GACzC,IAAMC,EAAgBC,mBAGtBZ,qBAAU,WACRW,EAAcE,QAAUJ,IACvB,CAACA,IAGJT,qBAAU,WAQR,GAAc,OAAVU,EAAgB,CAClB,IAAMI,EAAKC,aARA,WAAO,IACXF,EAAWF,EAAXE,QAEHA,SACFA,MAI2BH,GAC7B,OAAO,kBAAMM,cAAcF,IAE7B,OAAO,eACN,CAACJ","file":"component---src-pages-apps-kegel-training-js-e86ecb46f3e5d12096f5.js","sourcesContent":["// @flow\n\nimport styled, {createGlobalStyle} from 'styled-components'\n\nimport type {ComponentType} from 'react'\n\nexport const GlobalStyle = createGlobalStyle`\nhtml, body, #___gatsby, #gatsby-focus-wrapper {\n    height: 100%;\n}\n\nbody {\n    margin: 0px;\n}\n`\n\nexport const Container: ComponentType<{}> = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const Number: ComponentType<{}> = styled.div`\n  font-size: 180px;\n  font-weight: bold;\n\n  @media screen and (min-width: ${props => props.theme.spacing(125)}px) {\n    font-size: 300px;\n  }\n`\n\nexport const Counter: ComponentType<{}> = styled(Number)`\n  color: red;\n`\n\nexport const Overlay: ComponentType<{}> = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n`\n","// @flow\n\nimport React, {useState, useEffect, useCallback} from 'react'\nimport {ThemeProvider} from 'styled-components'\nimport {CssBaseline} from '@material-ui/core'\nimport {createMuiTheme} from '@material-ui/core/styles'\n\nimport {GlobalStyle, Container, Counter, Overlay, Number} from './styles'\n\nimport {useInterval} from '../../../utils/common'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#757ce8',\n      main: '#3f50b5',\n      dark: '#002884',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n})\n\nconst KegelTraining = () => {\n  const [num, setNum] = useState<number>(100)\n\n  const [counterNum, setCounterNum] = useState<number>(5)\n\n  const [counting, setCounting] = useState<boolean>(false)\n\n  const [counterDelay, setCounterDelay] = useState<?number>(null)\n\n  const counterTimeout = useCallback(() => {\n    setCounterNum(value => {\n      const newNum: number = value - 1\n\n      if (newNum === 0) {\n        setCounting(false)\n        setNum(n => n - 1)\n        setCounterDelay(null)\n      }\n\n      return newNum\n    })\n  }, [])\n\n  useInterval(counterTimeout, counterDelay)\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.keyCode === 32 && !counting && num > 0) {\n        setCounting(true)\n        setCounterNum(5)\n        setCounterDelay(1000)\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown)\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [counting, num])\n\n  return (\n    <>\n      <CssBaseline />\n      <GlobalStyle />\n      <ThemeProvider theme={theme}>\n        <Container>\n          {counting ? <Counter>{counterNum}</Counter> : <Number>{num}</Number>}\n          <Overlay />\n        </Container>\n      </ThemeProvider>\n    </>\n  )\n}\n\nexport default KegelTraining\n","// @flow\n\nimport {graphql} from 'gatsby'\nimport KegelTraining from '../../components/pages/kegel-training'\n\nexport default KegelTraining\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n","// @flow\nimport {useEffect, useRef} from 'react'\n\nexport const print = (msg: string) => console.log(msg)\n\nexport const sleep = (time: number) => new Promise<any>(resolve => setTimeout(resolve, time))\n\nexport const useInterval = (callback: any, delay: ?number) => {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    const tick = () => {\n      const {current} = savedCallback\n\n      if (current !== undefined && current !== null) {\n        current()\n      }\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n    return () => {}\n  }, [delay])\n}\n"],"sourceRoot":""}